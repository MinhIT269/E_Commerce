<!DOCTYPE html>
<html lang="en">

<head>
    @await Html.PartialAsync("_Header")
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>;
</head>

<body>

    <!-- START Wrapper -->
    <div class="wrapper">

        <!-- ========== Topbar Start ========== -->
        <header class="topbar">
            <div class="container-fluid">
                <div class="navbar-header">
                    <div class="d-flex align-items-center">
                        <!-- Menu Toggle Button -->
                        <div class="topbar-item">
                            <button type="button" class="button-toggle-menu me-2">
                                <iconify-icon icon="solar:hamburger-menu-broken" class="fs-24 align-middle"></iconify-icon>
                            </button>
                        </div>

                        <!-- Menu Toggle Button -->
                        <div class="topbar-item">
                            <h4 class="fw-bold topbar-button pe-none text-uppercase mb-0">Cập Nhật Thương Hiệu</h4>
                        </div>
                    </div>

                    <div class="d-flex align-items-center gap-1">

                        @await Html.PartialAsync("_Topbar")

                    </div>
                </div>
            </div>
        </header>

        <!-- Right Sidebar (Theme Settings) -->
        @await Html.PartialAsync("_SidebarRight")
        <!-- ========== Topbar End ========== -->
        <!-- ========== App Menu Start ========== -->
        @await Html.PartialAsync("_SidebarMenu")
        <!-- ========== App Menu End ========== -->
        <!-- ==================================================== -->
        <!-- Start right Content here -->
        <!-- ==================================================== -->
        <div class="page-content">

            <!-- Start Container Fluid -->
            <!-- Start Container Fluid -->
            <div class="container-xxl">
                <div class="row">
                    <form id="brand-form" method="post" enctype="multipart/form-data">
                        <!-- Brand Information Form -->
                        <div class="col-xl-9 col-lg-8 offset-xl-1">
                            <!-- Card for Brand Update -->
                            <div class="card">
                                <div class="card-header">
                                    <h4 class="card-title">Thông Tin</h4>
                                </div>
                                <div class="card-body">
                                    <!-- Start of Single Form -->
                                    <input type="hidden" id="brand-id" value="@Model.BrandId" />
                                    <div class="row">
                                        <div class="col-lg-6">
                                            <div class="mb-3">
                                                <label for="brand-title" class="form-label fw-bold">Cập Nhật Thương Hiệu </label>
                                                <input type="text" name="BrandName" id="brand-title" class="form-control" placeholder="Nhập tên" maxlength="110" value="@Model.BrandName" required>
                                                <small id="char-count" class="form-text text-muted">110 ký tự</small>
                                            </div>
                                        </div>
                                        <div class="col-lg-6">
                                            <label for="creator" class="form-label fw-bold">Người Tạo</label>
                                            <select class="form-control" id="creator" name="creator">
                                                <option value="Admin">Admin</option>
                                            </select>
                                        </div>
                                        <div class="col-lg-12">
                                            <div class="mb-0">
                                                <label for="description" class="form-label fw-bold">Mô Tả</label>
                                                <textarea class="form-control bg-light-subtle" id="description" rows="7" maxlength="500" name="Description" placeholder="Chi tiết thương hiệu" required>@Model.Description</textarea>
                                                <small id="char-count-description" class="form-text text-muted">0/500 ký tự</small>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Card for Actions (Update, Cancel) -->
                            <div class="card mt-3">
                                <div class="card-body">
                                    <div class="p-3 bg-light mb-3 rounded">
                                        <div class="row justify-content-end g-2">
                                            <div class="col-lg-4">
                                                <button type="button" class="btn btn-outline-secondary w-100" onclick="updateBrand()">Cập Nhật</button>
                                            </div>
                                            <div class="col-lg-2">
                                                <button type="button" id="cancel-button" class="btn btn-primary w-100">Hủy</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="col-xl-9 col-lg-8 offset-xl-1" id="locations-container">
                            @for (int i = 0; i < Model.Locations.Count; i++)
                            {
                                <div class="card" data-location-id="@Model.Locations[i].LocationId">
                                    <!-- Lưu LocationId vào data-attribute -->
                                    <div class="card-header">
                                        <h4 class="card-title">Địa Điểm</h4>
                                    </div>
                                    <div class="card-body">
                                        <div class="location-item">
                                            <div class="row">
                                                <div class="col-lg-6">
                                                    <div class="mb-3">
                                                        <label class="form-label fw-bold">Vị Trí</label>
                                                        <input type="text" name="Locations[@i].Name" class="form-control location-name" value="@Model.Locations[i].Name" placeholder="Nhập vị trí" maxlength="180" required>
                                                        <small class="form-text text-muted">180 ký tự</small>
                                                    </div>
                                                </div>
                                                <div class="col-lg-6">
                                                    <div class="mb-3">
                                                        <label class="form-label fw-bold">Map Link</label>
                                                        <input type="url" name="Locations[@i].YoutubeLink" class="form-control" value="@Model.Locations[i].YoutubeLink" placeholder="Nhập link map">
                                                    </div>
                                                </div>
                                                <div class="col-lg-12">
                                                    <div class="mb-3">
                                                        <label class="form-label fw-bold">Mô Tả</label>
                                                        <textarea class="form-control bg-light-subtle location-description" rows="4" maxlength="360" name="Locations[@i].Description" placeholder="Chi tiết vị trí" required>@Model.Locations[i].Description</textarea>
                                                        <small class="form-text text-muted">0/360 ký tự</small>
                                                    </div>
                                                </div>
                                                <!-- Ẩn input chứa LocationId -->
                                                <input type="hidden" name="Locations[@i].Id" value="@Model.Locations[i].LocationId" />
                                            </div>
                                        </div>
                                        <button type="button" class="btn btn-warning btn-sm mt-2" onclick="updateLocation(this)">Cập Nhật</button>
                                        <button type="button" class="btn btn-danger btn-sm float-end" onclick="removeLocation(this)">Xóa</button>
                                    </div>
                                </div>
                            }
                            <div class="text-end mb-3">
                                <button type="button" onclick="addLocation()" class="btn btn-outline-secondary">Thêm Địa Điểm Khác</button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
            <!-- End Container Fluid -->
            <!-- ========== Footer Start ========== -->
            @await Html.PartialAsync("_Footer")
            <!-- ========== Footer End ========== -->

        </div>
        <!-- ==================================================== -->
        <!-- End Page Content -->
        <!-- ==================================================== -->


    </div>
    <!-- END Wrapper -->
    <!-- Vendor Javascript (Require in all Page) -->
    <script src="~/js/vendor.js"></script>

    <!-- App Javascript (Require in all Page) -->
    <script src="~/js/app.js"></script>
    <script>
        let locationIndex = 1;
        async function addLocation() {
            const container = document.getElementById("locations-container");
            const newCard = document.createElement("div");

            newCard.classList.add("card", "mt-4");
            newCard.innerHTML = `
                <div class="card-header">
                    <h4 class="card-title">Địa Điểm</h4>
                </div>
                <div class="card-body">
                    <div class="location-item">
                        <div class="row">
                            <div class="col-lg-6">
                                <div class="mb-3">
                                    <label class="form-label fw-bold">Vị Trí</label>
                                    <input type="text" name="Locations[${locationIndex}].Name" class="form-control location-name" placeholder="Nhập vị trí" maxlength="180" required>
                                    <small class="form-text text-muted char-count">180 ký tự</small>
                                </div>
                            </div>
                            <div class="col-lg-6">
                                <div class="mb-3">
                                    <label class="form-label fw-bold">Map Link</label>
                                    <input type="url" name="Locations[${locationIndex}].YoutubeLink" class="form-control" placeholder="Nhập link map">
                                </div>
                            </div>
                            <div class="col-lg-12">
                                <div class="mb-3">
                                    <label class="form-label fw-bold">Mô Tả</label>
                                    <textarea class="form-control bg-light-subtle location-description" rows="4" maxlength="360" name="Locations[${locationIndex}].Description" placeholder="Chi tiết vị trí" required></textarea>
                                    <small class="form-text text-muted description-char-count">0/360 ký tự</small>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- Nút thêm địa điểm, sẽ gọi API khi nhấn -->
                    <button type="button" class="btn btn-success btn-sm mt-2" onclick="addLocationToAPI(this)">Thêm Địa Điểm</button>
                </div>
            `;

            container.appendChild(newCard);
            locationIndex++;

            // Gọi lại hàm updateCharacterCount() để gắn sự kiện cho các input mới
            updateCharacterCount();
        }

        async function addLocationToAPI(button) {
            // Lấy thông tin của các input trong card này
            const brandId = document.getElementById("brand-id").value;
            const card = button.closest('.card');
            const name = card.querySelector('input[name*="Name"]').value;
            const youtubeLink = card.querySelector('input[name*="YoutubeLink"]').value;
            const description = card.querySelector('textarea[name*="Description"]').value;

            // Kiểm tra xem các trường có dữ liệu không
            if (!name || !description) {
                alert("Vui lòng điền đầy đủ thông tin.");
                return;
            }

            // Dữ liệu cần gửi đến API
            const locationData = {
                BrandId: brandId,
                Name: name,
                YoutubeLink: youtubeLink,
                Description: description,
            };

            try {
                // Gửi yêu cầu POST đến API
                const response = await fetch('https://localhost:7069/api/Location/Add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(locationData),
                });

                if (response.ok) {
                    alert("Địa điểm đã được thêm thành công.");
                    location.reload();
                    // Sau khi thêm thành công, có thể thực hiện các hành động khác nếu cần (ví dụ, xóa card, làm mới dữ liệu, v.v.)
                } else {
                    alert("Có lỗi xảy ra khi thêm địa điểm.");
                }
            } catch (error) {
                console.error("Lỗi khi thêm địa điểm:", error);
                alert("Lỗi khi thêm địa điểm!");
            }
        }

        async function removeLocation(button) {
            // Lấy thông tin LocationId từ dữ liệu của card
            const locationId = $(button).closest('.card').data('location-id'); // Hoặc bạn có thể sử dụng jQuery hoặc data attribute

            if (!locationId) {
                alert("Không có thông tin địa điểm.");
                return;
            }

            // Xác nhận hành động xóa
            if (!confirm("Bạn có chắc muốn xóa địa điểm này?")) {
                return;
            }

            try {
                // Gửi yêu cầu xóa đến API
                const response = await fetch(`https://localhost:7069/api/Location/Delete/${locationId}`, {
                    method: 'DELETE',
                });

                if (response.ok) {
                    // Nếu xóa thành công, xóa card của địa điểm khỏi DOM
                    $(button).closest('.card').remove();
                    alert("Địa điểm đã được xóa.");
                } else {
                    // Xử lý khi API trả lỗi
                    alert("Có lỗi xảy ra khi xóa địa điểm.");
                }
            } catch (error) {
                console.error('Có lỗi khi xóa địa điểm:', error);
                alert('Lỗi khi xóa địa điểm!');
            }
        }

        const updateTextContent = (elementId, value, defaultText) => {
            document.getElementById(elementId).textContent = value || defaultText;
        };

        // Xử lý cập nhật số ký tự cho input 'BrandName' và textarea 'Description'
        document.getElementById("brand-title").addEventListener("input", e => {
            updateTextContent("char-count", `${e.target.value.length}/110 ký tự`, "");
        });

        document.getElementById("description").addEventListener("input", e => {
            updateTextContent("char-count-description", `${e.target.value.length}/500 ký tự`, "");
        });

        document.getElementById("cancel-button").addEventListener("click", function () {
            var userConfirmed = confirm("Bạn có chắc chắn hủy");

            if (userConfirmed) {
                window.location.href = "/Admin/Brand/IndexBrand";
            }
        });

        function updateCharacterCount() {
            // Chọn tất cả các input có class 'location-name' và textarea có class 'location-description'
            const inputFields = document.querySelectorAll('.location-name, .location-description');

            inputFields.forEach(function (field) {
                const charCountElement = field.closest('.mb-3').querySelector('.char-count, .description-char-count');

                field.addEventListener('input', function () {
                    const maxLength = field.getAttribute('maxlength');
                    const currentLength = field.value.length;

                    // Cập nhật thông tin số ký tự còn lại
                    if (charCountElement) {
                        if (field.classList.contains('location-description')) {
                            charCountElement.textContent = `${currentLength}/360 ký tự`;
                        } else {
                            charCountElement.textContent = `${180 - currentLength} ký tự còn lại`;
                        }
                    }
                });
            });
        }

        // Gọi hàm khi load trang để gắn sự kiện cho các input đã có
        document.addEventListener('DOMContentLoaded', function () {
            updateCharacterCount();
        });

        async function updateLocation(button) {
            // Find the card that contains this button
            const card = button.closest('.card');

            // Retrieve the LocationId from the hidden input
            const locationId = card.querySelector('input[name*="Id"]').value;
            const name = card.querySelector('input[name*="Name"]').value;
            const youtubeLink = card.querySelector('input[name*="YoutubeLink"]').value;
            const description = card.querySelector('textarea[name*="Description"]').value;

            // Validate required fields
            if (!name || !description) {
                alert("Vui lòng điền đầy đủ thông tin.");
                return;
            }

            // Prepare the location data for the API
            const locationData = {
                Name: name,
                YoutubeLink: youtubeLink,
                Description: description
            };

            try {
                // Send a PUT request with the LocationId as a query parameter
                const response = await fetch(`https://localhost:7069/api/Location/Update?id=${locationId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(locationData),
                });

                if (response.ok) {
                    alert("Địa điểm đã được cập nhật thành công.");
                    // Optionally, reload the page or update the DOM after success
                    location.reload();  // Reload the page to show the updated data
                } else {
                    alert("Có lỗi xảy ra khi cập nhật địa điểm.");
                }
            } catch (error) {
                console.error("Lỗi khi cập nhật địa điểm:", error);
                alert("Lỗi khi cập nhật địa điểm!");
            }
        }
        async function updateBrand() {
            // Get the Brand ID from the hidden input
            const brandId = document.getElementById("brand-id").value;

            // Get the form field values
            const brandName = document.getElementById("brand-title").value;
            const description = document.getElementById("description").value;
            const creator = document.getElementById("creator").value; // Not used in the API, but you can send it if necessary

            // Validate the required fields
            if (!brandName || !description) {
                alert("Vui lòng điền đầy đủ thông tin.");
                return;
            }

            // Create the object to send in the PUT request
            const updatedBrandData = {
                BrandName: brandName,
                Description: description,
                Creator: creator // Send the creator if necessary
            };

            try {
                // Make the PUT request to the API
                const response = await fetch(`https://localhost:7069/api/Brand/Update/${brandId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(updatedBrandData)
                });

                // Handle the response
                if (response.ok) {
                    const updatedBrand = await response.json();
                    alert("Thương hiệu đã được cập nhật thành công.");
                    console.log("Updated Brand:", updatedBrand);
                    // Optionally, reload the page or update the UI with the new brand data
                    window.location.href = "/Admin/Brand/IndexBrand"; // Reload the page to reflect the updated brand details
                } else {
                    const errorData = await response.json();
                    alert(`Lỗi: ${errorData.message}`);
                }
            } catch (error) {
                console.error("Lỗi khi cập nhật thương hiệu:", error);
                alert("Lỗi khi cập nhật thương hiệu!");
            }
        }
    </script>
</body>

</html>