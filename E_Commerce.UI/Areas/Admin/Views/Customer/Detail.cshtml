@using E_Commerce.UI.Models
@model E_Commerce.UI.Models.Responses.UserDto
<!DOCTYPE html>
<html lang="en">


<head>
    @await Html.PartialAsync("_Header")
</head>

<body>

    <!-- START Wrapper -->
    <div class="wrapper">

        <!-- ========== Topbar Start ========== -->
        <header class="topbar">
            <div class="container-fluid">
                <div class="navbar-header">
                    <div class="d-flex align-items-center">
                        <!-- Menu Toggle Button -->
                        <div class="topbar-item">
                            <button type="button" class="button-toggle-menu me-2">
                                <iconify-icon icon="solar:hamburger-menu-broken" class="fs-24 align-middle"></iconify-icon>
                            </button>
                        </div>

                        <!-- Menu Toggle Button -->
                        <div class="topbar-item">
                            <h4 class="fw-bold topbar-button pe-none text-uppercase mb-0">KHÁCH HÀNG</h4>
                        </div>
                    </div>

                    <div class="d-flex align-items-center gap-1">

                        @await Html.PartialAsync("_Topbar")

                        <!-- App Search-->
                        <form class="app-search d-none d-md-block ms-2">
                            <div class="position-relative">
                                <input type="search" name="searchQuery" class="form-control" placeholder="Tìm kiếm..." autocomplete="off" value="">
                                <iconify-icon icon="solar:magnifer-linear" class="search-widget-icon"></iconify-icon>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </header>

        <!-- Right Sidebar (Theme Settings) -->
        @await Html.PartialAsync("_SidebarRight")
        <!-- ========== Topbar End ========== -->
        <!-- ========== App Menu Start ========== -->
        @await Html.PartialAsync("_SidebarMenu")
        <!-- ========== App Menu End ========== -->
        <!-- ==================================================== -->
        <!-- Start right Content here -->
        <!-- ==================================================== -->
        <div>

            <div class="page-content">

                <!-- Start Container Fluid -->
                <div class="container-xxl">


                    <div class="row">
                        <div class="col-lg-4">
                            <div class="card overflow-hidden">
                                <div class="card-body">
                                    <div class="bg-primary profile-bg rounded-top p-5 position-relative mx-n3 mt-n3">
                                        <img src="~/images/users/avatar-2.jpg" alt="" class="avatar-lg border border-light border-3 rounded-circle position-absolute top-100 start-0 translate-middle ms-5">
                                    </div>
                                    <div class="mt-4 pt-3">
                                        <h4 class="mb-1"> @Model.LastName @Model.FirstName<i class="bx bxs-badge-check text-success align-middle"></i></h4>
                                        <div class="mt-2">

                                            <p class="fs-15 mb-1 mt-1"><span class="text-dark fw-semibold">Email : </span> @Model.Email</p>
                                            <p class="fs-15 mb-0 mt-1"><span class="text-dark fw-semibold">SĐT : </span> @Model.PhoneNumber</p>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="card">
                                <div class="card-header d-flex align-items-center justify-content-between">
                                    <div>
                                        <h4 class="card-title">Chi Tiết</h4>
                                    </div>
                                    <div>
                                        <span class="badge bg-success-subtle text-success px-2 py-1">Active User</span>
                                    </div>
                                    <input type="hidden" id="userId" value="@Model.Id" />
                                </div>
                                <div class="card-body py-2">
                                    <div class="table-responsive">
                                        <table class="table mb-0">
                                            <tbody>
                                                <tr>
                                                    <td class="px-0">
                                                        <p class="d-flex mb-0 align-items-center gap-1 fw-semibold text-dark">Mã KH : </p>
                                                    </td>
                                                    <td class="text-dark fw-medium px-0">#KH-@Model.Id.ToUpper().Substring(0, 8)</td>
                                                </tr>
                                                <tr>
                                                    <td class="px-0">
                                                        <p class="d-flex mb-0 align-items-center gap-1 fw-semibold text-dark"> Email Hóa Đơn : </p>
                                                    </td>
                                                    <td class="text-dark fw-medium px-0">@Model.Email</td>
                                                </tr>
                                                <tr>
                                                    <td class="px-0">
                                                        <p class="d-flex mb-0 align-items-center gap-1 fw-semibold text-dark"> Địa Chỉ Giao Hàng: </p>
                                                    </td>
                                                    <td class="text-dark fw-medium px-0">@Model.Address</td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>

                        </div>

                        <div class="col-lg-8">
                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="card bg-info-subtle">
                                        <div class="card-body">
                                            <div class="d-flex align-items-center justify-content-between">
                                                <div>
                                                    <h4 class="card-title mb-2 d-flex align-items-center gap-2">Tổng Đơn Hàng</h4>
                                                    <p id="TotalOrders" class="text-muted fw-medium fs-22 mb-0">999</p>
                                                </div>
                                                <div>
                                                    <div class="avatar-md bg-primary bg-opacity-10 rounded">
                                                        <iconify-icon icon="solar:bill-list-bold-duotone" class="fs-32 text-primary avatar-title"></iconify-icon>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="card bg-success-subtle">
                                        <div class="card-body">
                                            <div class="d-flex align-items-center justify-content-between">
                                                <div>
                                                    <h4 class="card-title mb-2 d-flex align-items-center gap-2">Đơn Thành Công</h4>
                                                    <p id="OrderSuccess" class="text-muted fw-medium fs-22 mb-0">999</p>
                                                </div>
                                                <div>
                                                    <div class="avatar-md bg-primary bg-opacity-10 rounded">
                                                        <iconify-icon icon="solar:box-bold-duotone" class="fs-32 text-primary avatar-title"></iconify-icon>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="col-lg-4">
                                    <div class="card bg-warning-subtle">
                                        <div class="card-body">
                                            <div class="d-flex align-items-center justify-content-between">
                                                <div>
                                                    <h4 class="card-title mb-2 d-flex align-items-center gap-2">Doanh Thu Đơn Hàng</h4>
                                                    <p id="OrderPrice" class="text-muted fw-medium fs-22 mb-0">999.999 VNĐ</p>
                                                </div>
                                                <div>
                                                    <div class="avatar-md bg-primary bg-opacity-10 rounded">
                                                        <iconify-icon icon="solar:chat-round-money-bold-duotone" class="fs-32 text-primary avatar-title"></iconify-icon>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="card">
                                <div class="card-header">
                                    <h4 class="card-title">Lịch Sử Giao Dịch</h4>
                                </div>
                                <div class="card-body">
                                    <div class="table-responsive">
                                        <table class="table align-middle mb-0 table-hover table-centered">
                                            <thead class="bg-light-subtle">
                                                <tr>
                                                    <th>#</th>
                                                    <th>Mã Đơn Hàng</th>
                                                    <th>Ngày Mua</th>
                                                    <th>Giá Trị</th>
                                                    <th>Trạng Thái</th>
                                                    <th>Hành Động</th>
                                                </tr>
                                            </thead>
                                            <tbody id="orderTableBody">
                                                <!--Data-->
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                                <div class="card-footer border-top">
                                    <nav aria-label="Page navigation example">
                                        <ul class="pagination justify-content-end mb-0" id="pagination">
                                            <!--Trang-->
                                        </ul>
                                    </nav>
                                </div>
                            </div>
                        </div>
                    </div>


                </div>
                <!-- End Container Fluid -->
                <!-- ========== Footer Start ========== -->
                @await Html.PartialAsync("_Footer")
                <!-- ========== Footer End ========== -->

            </div>
            <!-- ==================================================== -->
            <!-- End Page Content -->
            <!-- ==================================================== -->

        </div>

    </div>
    <!-- END Wrapper -->
    <!-- Vendor Javascript (Require in all Page) -->
    <script src="~/js/vendor.js"></script>

    <!-- App Javascript (Require in all Page) -->
    <script src="~/js/app.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="~/js/pages/customer-details.js"></script>
    <script>
        const itemsPerPage = 5;
        let currentPage = 1;
        const maxVisiblePages = 3;
        let searchQuery = '';
        const API_URL = "@ViewBag.ApiBaseUrl";

        async function RenderOrderTable(page) {
            const orders = await getOrders(searchQuery, page);
            const tableBody = document.getElementById('orderTableBody');
            tableBody.innerHTML = '';
            orders.forEach((item, index) => {
                tableBody.innerHTML += createOrdersRow(item, (page - 1) * itemsPerPage + index);
            });
        }

        async function renderPagination() {
            const totalPages = await getTotalPages(searchQuery);
            const pagination = document.getElementById('pagination');
            pagination.innerHTML = '';

            let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
            let endPage = Math.min(totalPages, currentPage + Math.floor(maxVisiblePages / 2));

            if (endPage - startPage + 1 < maxVisiblePages) {
                if (endPage === totalPages) {
                    startPage = Math.max(1, endPage - maxVisiblePages + 1);
                } else {
                    endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
                }
            }

            pagination.innerHTML += `
                                    <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                                        <a class="page-link" href="javascript:void(0);" onclick="changePage(${currentPage - 1})">Trước</a>
                                    </li>
                                `;

            for (let i = startPage; i <= endPage; i++) {
                pagination.innerHTML += `
                                        <li class="page-item ${i === currentPage ? 'active' : ''}">
                                            <a class="page-link" href="javascript:void(0);" onclick="changePage(${i})">${i}</a>
                                        </li>
                                    `;
            }

            pagination.innerHTML += `
                                    <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                                        <a class="page-link" href="javascript:void(0);" onclick="changePage(${currentPage + 1})">Tiếp Theo</a>
                                    </li>
                                `;
        }

        async function changePage(page) {
            const totalPages = await getTotalPages(searchQuery);
            if (page < 1 || page > totalPages) return;
            currentPage = page;
            await RenderOrderTable(page);
            renderPagination();
        }

        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString('en-GB');
        }

        function createOrdersRow(item, index) {

            const price = parseFloat(item.totalAmount);
            const formattedPrice = isNaN(price) ? '0' : price.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' });
            return `
                                    <tr>
                                        <td>${index + 1}</td>
                                        <td>#INV-${item.orderId.toUpperCase().substring(0, 8)}</td>
                                        <td>${formatDate(item.orderDate)}</td>
                                        <td>${formattedPrice}</td>
                                        <td>
                                        ${item.status.toLowerCase() === 'done' ? '<span class="badge bg-success">Success</span>' :
                                          item.status.toLowerCase() === 'pending' ? '<span class="badge bg-warning">Pending</span>' :
                                        '<span class="badge bg-danger">Cancel</span>'}
                                        </td>

                                        <td>
                                           <div class="d-flex gap-2">
                                             <a href="/Admin/Order/DetailOrder/${item.orderId}" class="btn btn-light btn-sm"><iconify-icon icon="solar:eye-broken" class="align-middle fs-18"></iconify-icon></a>
                                           </div>
                                        </td>
                                    </tr>
                                `;
        }

        async function getOrders(textsearch, page) {
            const userId = document.getElementById("userId").value;
            const url = `${API_URL}/api/Orders/AllOrder?id=${userId}&page=${page}&searchQuery=${encodeURIComponent(textsearch)}`;
            console.log(url);
            return new Promise((resolve, reject) => {
                $.ajax({
                    url: url,
                    type: 'GET',
                    dataType: 'json',
                    success: function (data) {
                        resolve(data);
                        console.log('Order received:', data);
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        console.error('Error:', textStatus, errorThrown);
                        reject(errorThrown);
                    }
                });
            });
        }

        async function getTotalPages(searchQuery = '') {
            const userId = document.getElementById("userId").value; // Retrieve the userId from the hidden input field

            const url = `${API_URL}/api/Orders/TotalPagesOrdered_Detail?id=${userId}&searchQuery=${encodeURIComponent(searchQuery)}`;
            try {
                const response = await $.ajax({
                    url: url,
                    type: 'GET',
                    dataType: 'json'
                });

                console.log('Total Pages:', response);
                return response > 0 ? response : 1; 
            } catch (error) {
                console.error('Error fetching total pages:', error);
                return 1; // Return 1 page by default in case of error
            }
        }

        document.querySelector('input[name="searchQuery"]').addEventListener('keydown', async (event) => {
            if (event.key === 'Enter') {
                event.preventDefault();
                searchQuery = event.target.value;
                currentPage = 1;
                await RenderOrderTable(currentPage);
                await renderPagination();
            }
        });
        async function loadOrdersStats() {
            try {
                const userId = document.getElementById("userId").value;
                const response = await fetch(`${API_URL}/api/Orders/GetOrdersStats_UserDetail?id=${userId}`);
                const stats = await response.json();
                console.log(stats);
                document.getElementById('TotalOrders').innerText = `${stats.totalOrders}`;
                document.getElementById('OrderSuccess').innerText = `${stats.orderSuccess}`;
                const formattedPrice = stats.sumOrder
                    ? parseFloat(stats.sumOrder).toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })
                    : '0₫';
                document.getElementById('OrderPrice').innerText = formattedPrice;
            } catch (error) {
                console.error("Failed to load orders stats: ", error);
            }

        }

        loadOrdersStats();
        RenderOrderTable(currentPage);
        renderPagination();
    </script>

</body>
</html>